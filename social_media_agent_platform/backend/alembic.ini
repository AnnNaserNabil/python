# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding --with-timezone to the [alembic] section
# of setup.cfg.
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to alembic/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path
# version_locations = %(here)s/bar %(here)s/bat alembic/versions

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# sqlalchemy.url = driver://user:pass@localhost/dbname
sqlalchemy.url = postgresql://postgres:postgres@localhost/social_agent


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks=black
# black.type=console_scripts
# black.entrypoint=black
# black.options=-l 79

# lint with
# hooks=flake8
# flake8.type=console_scripts
# flake8.entrypoint=flake8
# flake8.options=--max-line-length=79

# A hook that runs "mypy" on the newly generated migration script
# mypy.entrypoint is the entrypoint name of mypy
# mypy.options are options that will be passed to mypy
# mypy.type=console_scripts
# mypy.entrypoint=mypy
# mypy.options=--disallow-untyped-defs --no-implicit-optional --strict-optional --allow-redefinition --show-column-numbers --show-error-codes --pretty --no-error-summary
# mypy.env = MYPYPATH=./lib:./lib2

# You can also define hooks in Python modules, which will have access to
# the env.py module.  Note that relative paths are interpreted relative
# to the location of this file.
# hooks=myapp.db:custom_hooks

# Format using "black" using a subprocess
# hooks=black
# black.type=command
# black.executable=python3
# black.options=-m black --config=pyproject.toml ${rev_path} ${rev_args} ${rev_parse_opts}
# black.cwd=.
# black.env=PYTHONPATH=.

# Run flake8 on the generated migration file
# hooks=flake8
# flake8.type=command
# flake8.executable=python3
# flake8.options=-m flake8 --max-line-length=88 --extend-ignore=W504,E203 ${rev_path}
# flake8.cwd=.
# flake8.env=PYTHONPATH=.

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
